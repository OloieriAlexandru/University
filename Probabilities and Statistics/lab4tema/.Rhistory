b = sample_mean + critical_z*sigma/sqrt(n)
interval = c(a, b)
return(interval)
}
x=zconfidence_interval(8,140,0.05,10)
cat(sprintf("Intervalul cautat este (%f,%f).\n",x[1],x[2]))
d1 = zConfidenceInterval(8,140,0.95,10^2);
cat("Intervalul: [",d1[1],",",d1[2],"]\n");
zConfidenceInterval = function(n,xn,nivelIncredere,disp)
{
alpha = 1 - nivelIncredere;
sampleMean = xn;
sigma = sqrt(disp);
criticalZ = qnorm(1-alpha/2,mean=0,sd=1);
a = sampleMean - criticalZ*sigma/sqrt(n);
b = sampleMean + criticalZ*sigma/sqrt(n);
interval = c(a,b);
return (interval);
}
d2 = zConfidenceInterval(196,35,0.99,16);
cat("Intervalul: [",d2[1],",",d2[2],"]\n");
#D4
test_proportion <- function(alfa,n,succese,p0,tiptest){
cat(sprintf("Ipoteza initiala H0 este %f.\n",p0));
p_prim = succese/n;
z_score = (p_prim - p0)/sqrt(p0*(1 - p0)/n);
cat(sprintf("Scorul testului este %f.\n",z_score));
if(tiptest == 'stanga'){
critical_z = qnorm(alfa);
cat(sprintf("Valoarea critica este %f.\n",critical_z));
if(z_score>critical_z){
cat(print("Se accepta ipoteza nula!\n"));
}
else{
cat(print("Se respinge ipoteza nula!\n"));
}
}
else
{
if(tiptest == 'dreapta'){
critical_z = qnorm(1-alfa);
cat(sprintf("Valoarea critica este %f.\n",critical_z));
if(z_score<critical_z){
cat(print("Se accepta ipoteza nula!\n"));
}
else{
cat(print("Se respinge ipoteza nula!\n"));
}
}
else{
critical_z = qnorm(1-alfa/2);
cat(sprintf("Valoarea critica este %f.\n",critical_z));
if(abs(z_score)<abs(critical_z)){
cat(print("Se accepta ipoteza nula!\n"));
}
else{
cat(print("Se respinge ipoteza nula!\n"));
}
}
}
}
#H0 - proportia nu este mai mica( p0 = 0.509 )
#Ha - proportia este mai mica( p < p0 )
#p < p0 - ipoteza asimetrica la stanga
test_proportion(0.01,100,48,0.509,'stanga')
test_proportion(0.05,100,48,0.509,'stanga')
testProportion(0.01,100,48,0.509,1);
# D3
testProportion = function(alpha, n, success, p0, type)
#type = 1 -> asimetric stanga
#type = 2 -> asimetric dreapta
#type = 3 -> ipoteza simetrica
{
pPrim = success / n;
zScor = (pPrim - p0)/(sqrt(p0*(1-p0)/n));
ok = FALSE;
if (type == 1)
{
zStar = qnorm(alpha,0,1);
if (zScor > zStar)
{
print("Se accepta");
ok = TRUE;
}
}
else
if (type == 2)
{
zStar = qnorm(1-alpha,0,1);
print(zScor);
print(zStar);
if (zScor < zStar)
{
print("Se accepta");
ok = TRUE;
}
}
else
{
zStar = qnorm(1-alpha/2,0,1);
if (abs(zScor) < abs(zStar))
{
print("Se accepta");
ok = TRUE;
}
}
if (ok == FALSE)
{
print("Se respinge");
}
}
testProportion(0.01,100,32,0.3,2)
testProportion(0.05,100,32,0.3,2)
#D4
testProportion(0.01,100,48,0.509,1);
testProportion(0.05,100,48,0.509,1);
# D3
testProportion = function(alpha, n, success, p0, type)
#type = 1 -> asimetric stanga
#type = 2 -> asimetric dreapta
#type = 3 -> ipoteza simetrica
{
pPrim = success / n;
zScor = (pPrim - p0)/(sqrt(p0*(1-p0)/n));
ok = FALSE;
if (type == 1)
{
zStar = qnorm(alpha,0,1);
if (zScor > zStar)
{
print("Se accepta ipoteza nula");
ok = TRUE;
}
}
else
if (type == 2)
{
zStar = qnorm(1-alpha,0,1);
print(zScor);
print(zStar);
if (zScor < zStar)
{
print("Se accepta ipoteza nula");
ok = TRUE;
}
}
else
{
zStar = qnorm(1-alpha/2,0,1);
if (abs(zScor) < abs(zStar))
{
print("Se accepta ipoteza nula");
ok = TRUE;
}
}
if (ok == FALSE)
{
print("Se respinge ipoteza nula");
}
}
testProportion(0.01,100,32,0.3,2)
testProportion(0.05,100,32,0.3,2)
#D4
testProportion(0.01,100,48,0.509,1)
testProportion(0.05,100,48,0.509,1)
setwd("D:/R/lab4tema")
getPrimes = function(maxV)
{
cnt = 1;
ans = vector();
pr = vector(mode = "logical", length = maxV);
for (i in 2:maxV)
if (pr[i] == FALSE)
{
ans[cnt] = i;
cnt = cnt + 1;
j = i+i;
while (j<=maxV)
{
pr[j] = TRUE;
j = j + i;
}
}
return (ans);
}
number = function(sir, start, len, prime)
{
ans = 0;
upTo = start + len - 1;
pow2 = 1;
for (i in upTo : start)
{
act = substr(sir, i, i);
if (act == 1)
ans = (ans + pow2) %% prime;
pow2 = ( pow2 * 2 ) %% prime;
}
return (ans);
}
isSubstring = function(a, b)
{
n = nchar(a);
m = nchar(b);
if (n > m) return (FALSE);
v = (n^2)*m;
maxV = v * log(v);
numbers = getPrimes(maxV);
mod = sample(numbers, 1);
r = number(a, 1, n, mod);
for(i in 1:m-n+1)
{
act = number(b, i, n, mod);
if (act == r)
if (substr(b, i, i+n-1) == a)
return (i);
}
return (-1);
}
x = "011";
y = "000011"; # x se gaseste la pozitia 4
isSubstring(x,y)
y = "000"; # x nu se gaseste
isSubstring(x,y)
y = "011"; # x se gaseste la pozitia 1
isSubstring(x,y)
# B3
u1 = c(0,1,1,0);
u2 = c(1,1,0);
u3 = c(0,0,0,0,0,1);
u4 = c(1,1,1,1,1,0,0);
u5 = c(0,1,0,0,1,0,1);
u6 = c(1,0,0,1,0,1);
um = vector(mode = "list");
um[[1]] = u1;
um[[2]] = u2;
um[[3]] = u3;
um[[4]] = u5;
um
getPrimes = function(maxV)
{
cnt = 1;
ans = vector();
pr = vector(mode = "logical", length = maxV);
for (i in 2:maxV)
if (pr[i] == FALSE)
{
ans[cnt] = i;
cnt = cnt + 1;
j = i+i;
while (j<=maxV)
{
pr[j] = TRUE;
j = j + i;
}
}
return (ans);
}
number = function(sir, start, len, prime)
{
ans = 0;
upTo = start + len - 1;
pow2 = 1;
for (i in upTo : start)
{
act = substr(sir, i, i);
if (act == 1)
ans = (ans + pow2) %% prime;
pow2 = ( pow2 * 2 ) %% prime;
}
return (ans);
}
isSubstring = function(a, b)
{
n = nchar(a);
m = nchar(b);
if (n > m) return (FALSE);
v = (n^2)*m;
maxV = v * log(v);
numbers = getPrimes(maxV);
mod = sample(numbers, 1);
r = number(a, 1, n, mod);
for(i in 1:m-n+1)
{
act = number(b, i, n, mod);
if (act == r)
if (substr(b, i, i+n-1) == a)
return (i);
}
return (-1);
}
x = "011";
y = "000011"; # x se gaseste la pozitia 4
isSubstring(x,y)
y = "000"; # x nu se gaseste
isSubstring(x,y)
y = "011"; # x se gaseste la pozitia 1
isSubstring(x,y)
getPrimes(10000);
getPrimes = function(maxV)
{
cnt = 1;
ans = vector();
pr = vector(mode = "logical", length = maxV);
for (i in 2:maxV)
if (pr[i] == FALSE)
{
ans[cnt] = i;
cnt = cnt + 1;
j = i+i;
while (j<=maxV)
{
pr[j] = TRUE;
j = j + i;
}
}
return (ans);
}
number = function(sir, start, len, prime)
{
ans = 0;
upTo = start + len - 1;
pow2 = 1;
for (i in upTo : start)
{
act = substr(sir, i, i);
if (act == 1)
ans = (ans + pow2) %% prime;
pow2 = ( pow2 * 2 ) %% prime;
}
return (ans);
}
isSubstring = function(a, b)
{
n = nchar(a);
m = nchar(b);
if (n > m) return (FALSE);
v = (n^2)*m;
maxV = v * log(v);
numbers = getPrimes(maxV);
mod = sample(numbers, 1);
r = number(a, 1, n, mod);
for(i in 1:m-n+1)
{
act = number(b, i, n, mod);
if (act == r)
if (substr(b, i, i+n-1) == a)
return (i);
}
return (-1);
}
x = "011";
y = "000011"; # x se gaseste la pozitia 4
isSubstring(x,y)
y = "000"; # x nu se gaseste
isSubstring(x,y)
y = "011"; # x se gaseste la pozitia 1
isSubstring(x,y)
u1 = "0110";
u2 = "110";
u3 = "00001";
u4 = "1111100";
u5 = "0100101";
u6 = "100101";
um = vector(mode = "list");
um[[1]] = u1;
um[[2]] = u2;
um[[3]] = u3;
um[[5]] = u5;
um
um
u1 = "0110";
u2 = "110";
u3 = "00001";
u4 = "1111100";
u5 = "0100101";
u6 = "100101";
um = vector(mode = "list");
um[[1]] = u1;
um[[2]] = u2;
um[[3]] = u3;
um[[4]] = u5;
um
# B3
# u si U sunt stringuri
u1 = "0110";
u2 = "110";
u3 = "00001";
u4 = "1111100";
u5 = "0100101";
u6 = "100101";
um = vector(mode = "list");
um[[1]] = u1;
um[[2]] = u2;
um[[3]] = u3;
um[[4]] = u5;
um
c2v1 = function(mod, r, ln, um)
{
rv = vector();
nr = length(um);
lens = vector();
for (i in 1:nr)
{
lens[i] = nchar(um[[i]]);
rv[i] = number(um[[i]],1,lens[i],mod);
}
for (i in 1:nr)
{
if (rv[i] == r & ln == lens[i])
return (TRUE);
}
return (FALSE);
}
c1v1 = function(n, u, um)
{
n2 = n^2;
primeNumbers = getPrimes(n2);
mod = sample(primeNumbers, 1);
ln = nchar(u);
r = number(u, 1, ln, mod);
return (c2v1(mod, r, um));
}
c1v1(104, u4, um);
c1v1(100, u5, um);
c1v1(200, u6, um)
u1 = "0110";
u2 = "110";
u3 = "00001";
u4 = "1111100";
u5 = "0100101";
u6 = "100101";
um = vector(mode = "list");
um[[1]] = u1;
um[[2]] = u2;
um[[3]] = u3;
um[[4]] = u5;
um
c2v1 = function(mod, r, ln, um)
{
rv = vector();
nr = length(um);
lens = vector();
for (i in 1:nr)
{
lens[i] = nchar(um[[i]]);
rv[i] = number(um[[i]],1,lens[i],mod);
}
for (i in 1:nr)
{
if (rv[i] == r & ln == lens[i])
return (TRUE);
}
return (FALSE);
}
c1v1 = function(n, u, um)
{
n2 = n^2;
primeNumbers = getPrimes(n2);
mod = sample(primeNumbers, 1);
ln = nchar(u);
r = number(u, 1, ln, mod);
return (c2v1(mod, r, ln, um));
}
c1v1(104, u4, um);
c1v1(100, u5, um);
c1v1(200, u6, um)
u1 = c(0,1,1,0);
u2 = c(1,1,0);
u3 = c(0,0,0,0,0,1);
u4 = c(1,1,1,1,1,0,0);
u5 = c(0,1,0,0,1,0,1);
u6 = c(1,0,0,1,0,1);
um = vector(mode = "list");
um[[1]] = u1;
um[[2]] = u2;
um[[3]] = u3;
um[[4]] = u5;
um
numberFromSeq = function(u, mod)
{
ln = length(u);
p3 = 1;
ans = 0;
for (i in ln : 1)
{
ans = (ans + (u[i]+1)*p3) %% mod;
p3 = (p3 * 3) %% mod;
}
return (ans);
}
c2v2 = function(mod, r, um)
{
rv = vector();
nr = length(um);
for (i in 1:nr)
rv[i] = numberFromSeq(um[[i]], mod);
for (i in 1:nr)
if (rv[i] == r)
return (TRUE);
return (FALSE);
}
c1v2 = function(n, u, um)
{
n2 = n^2;
primeNumbers = getPrimes(n2);
mod = sample(primeNumbers, 1);
r = numberFromSeq(u, mod);
return (c2v2(mod, r, um));
}
c1v2(104, u4, um);
c1v2(100, u5, um);
c1v2(200, u6, um)
