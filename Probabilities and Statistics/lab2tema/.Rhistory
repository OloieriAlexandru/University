cat("Valoarea integralei: ",ans,", rezultatul aproximat: ",sum,"\n");
cat("Eroarea absoluta: ", abs(ans-sum),"\n");
}
integrala2();
computeSecondI = function(n)
{
sum = 0;
for (i in 1:n)
{
x = rexp(1);
sum = sum + (1/(2*x*x+1))/exp(-x);
}
sum = sum/n;
}
integrala2 = function()
{
pi = 3.141592653589793;
ans = pi/(2*sqrt(2));
n = 50000;
k = 30;
estimate = vector();
for (i in 1:k)
estimate[i] = computeSecondI(n);
sum = mean(estimate);
cat("Valoarea integralei: ",ans,", rezultatul aproximat: ",sum,"\n");
cat("Eroarea absoluta: ", abs(ans-sum),"\n");
}
integrala2();
integrala2();
integrala2();
computeSecondI = function(n)
{
sum = 0;
for (i in 1:n)
{
x = rexp(1);
sum = sum + (1/(2*x*x+1))/exp(x);
}
sum = sum/n;
return (sum);
}
integrala2 = function()
{
pi = 3.141592653589793;
ans = pi/(2*sqrt(2));
n = 10000;
k = 30;
estimate = vector();
for (i in 1:k)
estimate[i] = computeSecondI(n);
sum = mean(estimate);
cat("Valoarea integralei: ",ans,", rezultatul aproximat: ",sum,"\n");
cat("Eroarea absoluta: ", abs(ans-sum),"\n");
}
integrala2();
computeSecondI = function(n)
{
sum = 0;
for (i in 1:n)
{
x = rexp(1);
sum = sum + (1/(2*x*x+1))/exp(-x);
}
sum = sum/n;
return (sum);
}
integrala2 = function()
{
pi = 3.141592653589793;
ans = pi/(2*sqrt(2));
n = 10000;
k = 30;
estimate = vector();
for (i in 1:k)
estimate[i] = computeSecondI(n);
sum = mean(estimate);
cat("Valoarea integralei: ",ans,", rezultatul aproximat: ",sum,"\n");
cat("Eroarea absoluta: ", abs(ans-sum),"\n");
}
integrala2();
computeSecondI = function(n)
{
sum = 0;
for (i in 1:n)
{
x = rexp(1);
sum = sum + (1/(2*x*x+1))/exp(-x);
}
sum = sum/n;
return (sum);
}
integrala2 = function()
{
pi = 3.141592653589793;
ans = pi/(2*sqrt(2));
n = 50000;
k = 30;
estimate = vector();
for (i in 1:k)
estimate[i] = computeSecondI(n);
sum = mean(estimate);
cat("Valoarea integralei: ",ans,", rezultatul aproximat: ",sum,"\n");
cat("Eroarea absoluta: ", abs(ans-sum),"\n");
}
integrala2();
computeSecondI = function(n)
{
sum = 0;
for (i in 1:n)
{
x = rexp(1);
sum = sum + (1/(2*x*x+1))/rexp(-x);
}
sum = sum/n;
return (sum);
}
integrala2 = function()
{
pi = 3.141592653589793;
ans = pi/(2*sqrt(2));
n = 5000;
k = 30;
estimate = vector();
for (i in 1:k)
estimate[i] = computeSecondI(n);
sum = mean(estimate);
cat("Valoarea integralei: ",ans,", rezultatul aproximat: ",sum,"\n");
cat("Eroarea absoluta: ", abs(ans-sum),"\n");
}
integrala2();
computeSecondI = function(n)
{
sum = 0;
for (i in 1:n)
{
x = rexp(1);
sum = sum + (1/(2*x*x+1))/exp(-x);
}
sum = sum/n;
return (sum);
}
integrala2 = function()
{
pi = 3.141592653589793;
ans = pi/(2*sqrt(2));
n = 5000;
k = 30;
estimate = vector();
for (i in 1:k)
estimate[i] = computeSecondI(n);
sum = mean(estimate);
cat("Valoarea integralei: ",ans,", rezultatul aproximat: ",sum,"\n");
cat("Eroarea absoluta: ", abs(ans-sum),"\n");
}
integrala2();
computeSecondI = function(n)
{
sum = 0;
for (i in 1:n)
{
x = rexp(1);
sum = sum + (1/(2*x*x+1))/exp(-x);
}
sum = sum/n;
return (sum);
}
integrala2 = function()
{
pi = 3.141592653589793;
ans = pi/(2*sqrt(2));
n = 10000;
k = 30;
estimate = vector();
for (i in 1:k)
estimate[i] = computeSecondI(n);
sum = mean(estimate);
cat("Valoarea integralei: ",ans,", rezultatul aproximat: ",sum,"\n");
cat("Eroarea absoluta: ", abs(ans-sum),"\n");
}
integrala2();
computeSecondI = function(n)
{
sum = 0;
for (i in 1:n)
{
x = rexp(1);
sum = sum + (1/(2*x*x+1))/exp(-x);
}
sum = sum/n;
return (sum);
}
integrala2 = function()
{
pi = 3.141592653589793;
ans = pi/(2*sqrt(2));
n = 10000;
k = 30;
estimate = vector();
for (i in 1:k)
estimate[i] = computeSecondI(n);
sum = mean(estimate);
cat("Valoarea integralei: ",ans,", rezultatul aproximat: ",sum,"\n");
cat("Eroarea absoluta: ", abs(ans-sum),"\n");
}
integrala2();
computeSecondI = function(n)
{
sum = 0;
for (i in 1:n)
{
x = rexp(1);
sum = sum + (1/(2*x*x+1))/exp(-x);
}
sum = sum/n;
return (sum);
}
integrala2 = function()
{
pi = 3.141592653589793;
ans = pi/(2*sqrt(2));
n = 10000;
k = 30;
estimate = vector();
for (i in 1:k)
estimate[i] = computeSecondI(n);
sum = mean(estimate);
cat("Valoarea integralei: ",ans,", rezultatul aproximat: ",sum,"\n");
cat("Eroarea absoluta: ", abs(ans-sum),"\n");
}
integrala2();
computeSecondI = function(n)
{
sum = 0;
for (i in 1:n)
{
x = rexp(1);
sum = sum + (1/(2*x*x+1))/exp(-x);
}
sum = sum/n;
return (sum);
}
integrala2 = function()
{
pi = 3.141592653589793;
ans = pi/(2*sqrt(2));
n = 10000;
k = 30;
estimate = vector();
for (i in 1:k)
estimate[i] = computeSecondI(n);
sum = mean(estimate);
cat("Valoarea integralei: ",ans,", rezultatul aproximat: ",sum,"\n");
cat("Eroarea absoluta: ", abs(ans-sum),"\n");
}
integrala2();
# D2
zConfidenceInterval = function(n,xn,nivelIncredere,disp)
{
alpha = 1 - nivelIncredere;
sampleMean = xn;
sigma = sqrt(disp);
criticalZ = qnorm(1-alpha/2,mean=0,sd=1);
a = sampleMean - criticalZ*sigma/sqrt(n);
b = sampleMean + criticalZ*sigma/sqrt(n);
interval = c(a,b);
return (interval);
}
zConfidenceInterval(196,35,0.99,16);
# D1
zConfidenceInterval(8,140,0.95,10^2)
zconfidence_interval <- function(n,sample_mean,alfa,sigma){
critical_z = qnorm(1 - alfa/2, 0, 1)
a = sample_mean - critical_z*sigma/sqrt(n)
b = sample_mean + critical_z*sigma/sqrt(n)
interval = c(a, b)
return(interval)
}
x=zconfidence_interval(8,140,0.05,10)
cat(sprintf("Intervalul cautat este (%f,%f).\n",x[1],x[2]))
d1 = zConfidenceInterval(8,140,0.95,10^2);
cat("Intervalul: [",d1[1],",",d1[2],"]\n");
zConfidenceInterval = function(n,xn,nivelIncredere,disp)
{
alpha = 1 - nivelIncredere;
sampleMean = xn;
sigma = sqrt(disp);
criticalZ = qnorm(1-alpha/2,mean=0,sd=1);
a = sampleMean - criticalZ*sigma/sqrt(n);
b = sampleMean + criticalZ*sigma/sqrt(n);
interval = c(a,b);
return (interval);
}
d2 = zConfidenceInterval(196,35,0.99,16);
cat("Intervalul: [",d2[1],",",d2[2],"]\n");
#D4
test_proportion <- function(alfa,n,succese,p0,tiptest){
cat(sprintf("Ipoteza initiala H0 este %f.\n",p0));
p_prim = succese/n;
z_score = (p_prim - p0)/sqrt(p0*(1 - p0)/n);
cat(sprintf("Scorul testului este %f.\n",z_score));
if(tiptest == 'stanga'){
critical_z = qnorm(alfa);
cat(sprintf("Valoarea critica este %f.\n",critical_z));
if(z_score>critical_z){
cat(print("Se accepta ipoteza nula!\n"));
}
else{
cat(print("Se respinge ipoteza nula!\n"));
}
}
else
{
if(tiptest == 'dreapta'){
critical_z = qnorm(1-alfa);
cat(sprintf("Valoarea critica este %f.\n",critical_z));
if(z_score<critical_z){
cat(print("Se accepta ipoteza nula!\n"));
}
else{
cat(print("Se respinge ipoteza nula!\n"));
}
}
else{
critical_z = qnorm(1-alfa/2);
cat(sprintf("Valoarea critica este %f.\n",critical_z));
if(abs(z_score)<abs(critical_z)){
cat(print("Se accepta ipoteza nula!\n"));
}
else{
cat(print("Se respinge ipoteza nula!\n"));
}
}
}
}
#H0 - proportia nu este mai mica( p0 = 0.509 )
#Ha - proportia este mai mica( p < p0 )
#p < p0 - ipoteza asimetrica la stanga
test_proportion(0.01,100,48,0.509,'stanga')
test_proportion(0.05,100,48,0.509,'stanga')
testProportion(0.01,100,48,0.509,1);
# D3
testProportion = function(alpha, n, success, p0, type)
#type = 1 -> asimetric stanga
#type = 2 -> asimetric dreapta
#type = 3 -> ipoteza simetrica
{
pPrim = success / n;
zScor = (pPrim - p0)/(sqrt(p0*(1-p0)/n));
ok = FALSE;
if (type == 1)
{
zStar = qnorm(alpha,0,1);
if (zScor > zStar)
{
print("Se accepta");
ok = TRUE;
}
}
else
if (type == 2)
{
zStar = qnorm(1-alpha,0,1);
print(zScor);
print(zStar);
if (zScor < zStar)
{
print("Se accepta");
ok = TRUE;
}
}
else
{
zStar = qnorm(1-alpha/2,0,1);
if (abs(zScor) < abs(zStar))
{
print("Se accepta");
ok = TRUE;
}
}
if (ok == FALSE)
{
print("Se respinge");
}
}
testProportion(0.01,100,32,0.3,2)
testProportion(0.05,100,32,0.3,2)
#D4
testProportion(0.01,100,48,0.509,1);
testProportion(0.05,100,48,0.509,1);
# D3
testProportion = function(alpha, n, success, p0, type)
#type = 1 -> asimetric stanga
#type = 2 -> asimetric dreapta
#type = 3 -> ipoteza simetrica
{
pPrim = success / n;
zScor = (pPrim - p0)/(sqrt(p0*(1-p0)/n));
ok = FALSE;
if (type == 1)
{
zStar = qnorm(alpha,0,1);
if (zScor > zStar)
{
print("Se accepta ipoteza nula");
ok = TRUE;
}
}
else
if (type == 2)
{
zStar = qnorm(1-alpha,0,1);
print(zScor);
print(zStar);
if (zScor < zStar)
{
print("Se accepta ipoteza nula");
ok = TRUE;
}
}
else
{
zStar = qnorm(1-alpha/2,0,1);
if (abs(zScor) < abs(zStar))
{
print("Se accepta ipoteza nula");
ok = TRUE;
}
}
if (ok == FALSE)
{
print("Se respinge ipoteza nula");
}
}
testProportion(0.01,100,32,0.3,2)
testProportion(0.05,100,32,0.3,2)
#D4
testProportion(0.01,100,48,0.509,1)
testProportion(0.05,100,48,0.509,1)
setwd("D:/R/lab2tema")
sample = c(9.50,5.50,6.60,7.25,8.50,9.70,7.50,8.25,8.50,8.66,7.50,9.00,8.50,9.33,
8.33,9.90,8.75,5.60,6.50,6.75,8.20,8.33,9.50,8.66,6.50,7.25,9.50,9.33,
7.50,8.60,5.60,7.25,8.50,9.95,6.66,6.40,7.75,7.66,6.60,9.33,7.80,9.85,
6.66,8.66,5.75,8.25,8.33,9.75,8.25,6.33,7.50,8.25,8.66,8.33,5.75,9.33,
8.75,7.25,6.60,9.50,7.50,6.85,6.75,5.75,5.66,6.75,7.60,7.33,6.85,5.66);
printInfo = function(x)
{
m = mean(x);
s = sd(x);
aberante = vector();
cat("Media: ",m,"\n");
cat("Mediana: ",median(x),"\n");
cat("Deviatia standard: ",s,"\n");
cat("Quartilele: ",quantile(x)[2],quantile(x)[3],quantile(x)[4],"\n");
j = 0;
for (i in 1:length(x)){
if ((x[i] < m - 2*s) | (x[i] > m + 2*s)) {
j = j + 1;
aberante[j] = x[i];
}
}
if (length(aberante)>0) {
cat("Valorile aberante: ",aberante,"\n");
} else {
cat("Nu exista valori aberante\n");
}
interval = seq(4,10,1);
hist(x,breaks = interval, right = T, freq = T);
summary(x);
}
printInfo(sample);
sample = c(9.50,5.50,6.60,7.25,8.50,9.70,7.50,8.25,2.50,8.66,7.50,9.00,8.50,9.33,
8.33,9.90,8.75,5.60,6.50,6.75,8.20,8.33,9.50,8.66,6.50,7.25,9.50,9.33,
7.50,8.60,5.60,7.25,8.50,9.95,6.66,6.40,7.75,7.66,6.60,9.33,7.80,9.85,
6.66,8.66,5.75,8.25,8.33,9.75,8.25,6.33,7.50,8.25,8.66,8.33,5.75,9.33,
8.75,7.25,6.60,9.50,7.50,6.85,6.75,5.75,5.66,6.75,7.60,7.33,6.85,5.66);
printInfo = function(x)
{
m = mean(x);
s = sd(x);
aberante = vector();
cat("Media: ",m,"\n");
cat("Mediana: ",median(x),"\n");
cat("Deviatia standard: ",s,"\n");
cat("Quartilele: ",quantile(x)[2],quantile(x)[3],quantile(x)[4],"\n");
j = 0;
for (i in 1:length(x)){
if ((x[i] < m - 2*s) | (x[i] > m + 2*s)) {
j = j + 1;
aberante[j] = x[i];
}
}
if (length(aberante)>0) {
cat("Valorile aberante: ",aberante,"\n");
} else {
cat("Nu exista valori aberante\n");
}
interval = seq(4,10,1);
hist(x,breaks = interval, right = T, freq = T);
summary(x);
}
printInfo(sample);
B = function(n,p,lmb,k)
{
s = seq(0,k,1);
binomiala = dbinom(s,n,p);
barplot(binomiala, space = 0, main="Distributia binomiala",xlab = "x", ylab = "y");
geometrica = dgeom(s,p,log=FALSE);
barplot(geometrica, space = 0, main="Distributia geometrica",xlab = "x", ylab = "y");
poission = dpois(s,p,log=FALSE);
barplot(poission, space = 0, main="Distributia poisson",xlab = "x", ylab = "y");
}
B(100,0.3,0.25,50);
