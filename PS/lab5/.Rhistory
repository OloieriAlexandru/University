success = 63;
alpha = 0.01;
p = 0.6; # Ipoteza nula
# Ha p < p0 = 0.6 (as dreapta)
#3 alpha = 0.01
pPrim = success/n;
zScore = (pPrim-p0)/(sqrt((p0*(1-p0))/n))
zScore
zStar = qnorm(alpha,0,1);
p0 = 0.6;
n = 100;
success = 63;
alpha = 0.01;
p = 0.6; # Ipoteza nula
# Ha p < p0 = 0.6 (as stanga)
#3 alpha = 0.01
pPrim = success/n;
zScore = (pPrim-p0)/(sqrt((p0*(1-p0))/n))
zScore
zStar = qnorm(alpha,0,1);
zStar
p0 = 0.6;
n = 100;
success = 63;
alpha = 0.01;
p = 0.6; # Ipoteza nula
# Ha p < p0 = 0.6 (as stanga)
#3 alpha = 0.01
pPrim = success/n;
zScore = (pPrim-p0)/(sqrt((p0*(1-p0))/n))
zScore
zStar = qnorm(alpha,0,1);
zStar
testProportion(0.01, 100, 63,0.6, 1)
# Exercitii propuse
testProportion = function(alpha, n, success, p0, type)
#type = 1 -> asimetric stanga
#type = 2 -> asimetric dreapta
#type = 3 -> ipoteza simetrica
{
pPrim = success / n;
zScore = (pPrim - p0)/(sqrt(p0*(1-p0)/n));
ok = FALSE;
if (type == 1)
{
zStar = qnorm(alpha,0,1);
if (zScor > zStar)
{
print("Se accepta");
ok = TRUE;
}
}
else
if (type == 2)
{
zStar = qnorm(1-alpha,0,1);
if (zScor < zStar)
{
print("Se accepta");
ok = TRUE;
}
}
else
{
zStar = qnorm(1-alpha/2,0,1);
if (abs(zScor) < abs(zStar))
{
print("Se accepta");
ok = TRUE;
}
}
if (ok == TRUE)
{
print("Nu se accepta");
}
}
testProportion(0.01, 100, 63,0.6, 1)
# Exercitii propuse
testProportion = function(alpha, n, success, p0, type)
#type = 1 -> asimetric stanga
#type = 2 -> asimetric dreapta
#type = 3 -> ipoteza simetrica
{
pPrim = success / n;
zScor = (pPrim - p0)/(sqrt(p0*(1-p0)/n));
ok = FALSE;
if (type == 1)
{
zStar = qnorm(alpha,0,1);
if (zScor > zStar)
{
print("Se accepta");
ok = TRUE;
}
}
else
if (type == 2)
{
zStar = qnorm(1-alpha,0,1);
if (zScor < zStar)
{
print("Se accepta");
ok = TRUE;
}
}
else
{
zStar = qnorm(1-alpha/2,0,1);
if (abs(zScor) < abs(zStar))
{
print("Se accepta");
ok = TRUE;
}
}
if (ok == TRUE)
{
print("Nu se accepta");
}
}
testProportion(0.01, 100, 63,0.6, 1)
source('D:/R/lab5/lab5.R', echo=TRUE)
# Exercitii propuse
testProportion = function(alpha, n, success, p0, type)
#type = 1 -> asimetric stanga
#type = 2 -> asimetric dreapta
#type = 3 -> ipoteza simetrica
{
pPrim = success / n;
zScor = (pPrim - p0)/(sqrt(p0*(1-p0)/n));
ok = FALSE;
if (type == 1)
{
zStar = qnorm(alpha,0,1);
if (zScor > zStar)
{
print("Se accepta");
ok = TRUE;
}
}
else
if (type == 2)
{
zStar = qnorm(1-alpha,0,1);
if (zScor < zStar)
{
print("Se accepta");
ok = TRUE;
}
}
else
{
zStar = qnorm(1-alpha/2,0,1);
if (abs(zScor) < abs(zStar))
{
print("Se accepta");
ok = TRUE;
}
}
if (ok == FALSE)
{
print("Nu se accepta");
}
}
testProportion(0.01, 100, 63,0.6, 1)
testProportion(0.05, 150, 20, 0.1, 2)
testProportion(0.01, 100, 63,0.6, 1)
# Exercitii propuse
testProportion = function(alpha, n, success, p0, type)
#type = 1 -> asimetric stanga
#type = 2 -> asimetric dreapta
#type = 3 -> ipoteza simetrica
{
pPrim = success / n;
zScor = (pPrim - p0)/(sqrt(p0*(1-p0)/n));
ok = FALSE;
if (type == 1)
{
zStar = qnorm(alpha,0,1);
cat(zStar," ",zScor,"\n");
if (zScor > zStar)
{
print("Se accepta");
ok = TRUE;
}
}
else
if (type == 2)
{
zStar = qnorm(1-alpha,0,1);
if (zScor < zStar)
{
print("Se accepta");
ok = TRUE;
}
}
else
{
zStar = qnorm(1-alpha/2,0,1);
if (abs(zScor) < abs(zStar))
{
print("Se accepta");
ok = TRUE;
}
}
if (ok == FALSE)
{
print("Se respinge");
}
}
testProportion(0.01, 100, 63,0.6, 1)
p0 = 0.6;
n = 100;
success = 63;
alpha = 0.01;
p = 0.6; # Ipoteza nula
# Ha p < p0 = 0.6 (as stanga)
#3 alpha = 0.01
pPrim = success/n;
zScore = (pPrim-p0)/(sqrt((p0*(1-p0))/n))
zScore
zStar = qnorm(alpha,0,1);
zStar
# V
# Exercitiu rezolvat
p0 = 0.6;
n = 100;
success = 63;
alpha = 0.01;
p = 0.6; # Ipoteza nula
# Ha p < p0 = 0.6 (as stanga)
#3 alpha = 0.01
pPrim = success/n;
zScore = (pPrim-p0)/(sqrt((p0*(1-p0))/n))
zScore
zStar = qnorm(1-alpha,0,1);
zStar
# Exercitii propuse
testProportion = function(alpha, n, success, p0, type)
#type = 1 -> asimetric stanga
#type = 2 -> asimetric dreapta
#type = 3 -> ipoteza simetrica
{
pPrim = success / n;
zScor = (pPrim - p0)/(sqrt(p0*(1-p0)/n));
ok = FALSE;
if (type == 1)
{
zStar = qnorm(alpha,0,1);
cat(zStar," ",zScor,"\n");
if (zScor > zStar)
{
print("Se accepta");
ok = TRUE;
}
}
else
if (type == 2)
{
zStar = qnorm(1-alpha,0,1);
if (zScor < zStar)
{
print("Se accepta");
ok = TRUE;
}
}
else
{
zStar = qnorm(1-alpha/2,0,1);
if (abs(zScor) < abs(zStar))
{
print("Se accepta");
ok = TRUE;
}
}
if (ok == FALSE)
{
print("Se respinge");
}
}
testProportion(0.01, 100, 63,0.6, 1)
# V.3
testProportion(0.01, 42, 17, 0.25, 2);
# Exercitii propuse
testProportion = function(alpha, n, success, p0, type)
#type = 1 -> asimetric stanga
#type = 2 -> asimetric dreapta
#type = 3 -> ipoteza simetrica
{
pPrim = success / n;
zScor = (pPrim - p0)/(sqrt(p0*(1-p0)/n));
ok = FALSE;
if (type == 1)
{
zStar = qnorm(alpha,0,1);
if (zScor > zStar)
{
print("Se accepta");
ok = TRUE;
}
}
else
if (type == 2)
{
zStar = qnorm(1-alpha,0,1);
cat(zStar," ",zScor,"\n");
if (zScor < zStar)
{
print("Se accepta");
ok = TRUE;
}
}
else
{
zStar = qnorm(1-alpha/2,0,1);
if (abs(zScor) < abs(zStar))
{
print("Se accepta");
ok = TRUE;
}
}
if (ok == FALSE)
{
print("Se respinge");
}
}
testProportion(0.01, 100, 63,0.6, 1)
# V.2
testProportion(0.05, 150, 20, 0.1, 2)
# V.3
testProportion(0.01, 42, 17, 0.25, 2)
# Exercitii propuse
testProportion = function(alpha, n, success, p0, type)
#type = 1 -> asimetric stanga
#type = 2 -> asimetric dreapta
#type = 3 -> ipoteza simetrica
{
pPrim = success / n;
zScor = (pPrim - p0)/(sqrt(p0*(1-p0)/n));
ok = FALSE;
if (type == 1)
{
zStar = qnorm(alpha,0,1);
if (zScor > zStar)
{
print("Se accepta");
ok = TRUE;
}
}
else
if (type == 2)
{
zStar = qnorm(1-alpha,0,1);
cat(zStar," ",zScor,"\n");
if (zScor < zStar)
{
print("Se accepta");
ok = TRUE;
}
}
else
{
zStar = qnorm(1-alpha/2,0,1);
if (abs(zScor) < abs(zStar))
{
print("Se accepta");
ok = TRUE;
}
}
if (ok == FALSE)
{
print("Se respinge");
}
}
testProportion(0.01, 42, 17, 0.25, 2)
# Exercitii propuse
testProportion = function(alpha, n, success, p0, type)
#type = 1 -> asimetric stanga
#type = 2 -> asimetric dreapta
#type = 3 -> ipoteza simetrica
{
pPrim = success / n;
zScor = (pPrim - p0)/(sqrt(p0*(1-p0)/n));
print(zScor);
ok = FALSE;
if (type == 1)
{
zStar = qnorm(alpha,0,1);
if (zScor > zStar)
{
print("Se accepta");
ok = TRUE;
}
}
else
if (type == 2)
{
zStar = qnorm(1-alpha,0,1);
cat(zStar," ",zScor,"\n");
if (zScor < zStar)
{
print("Se accepta");
ok = TRUE;
}
}
else
{
zStar = qnorm(1-alpha/2,0,1);
if (abs(zScor) < abs(zStar))
{
print("Se accepta");
ok = TRUE;
}
}
if (ok == FALSE)
{
print("Se respinge");
}
}
testProportion(0.01, 42, 17, 0.25, 2)
# Exercitii propuse
testProportion = function(alpha, n, success, p0, type)
#type = 1 -> asimetric stanga
#type = 2 -> asimetric dreapta
#type = 3 -> ipoteza simetrica
{
pPrim = success / n;
zScor = (pPrim - p0)/(sqrt(p0*(1-p0)/n));
print(zScor);
ok = FALSE;
if (type == 1)
{
zStar = qnorm(alpha,0,1);
if (zScor > zStar)
{
print("Se accepta");
ok = TRUE;
}
}
else
if (type == 2)
{
zStar = qnorm(1-alpha,0,1);
if (zScor < zStar)
{
print("Se accepta");
ok = TRUE;
}
}
else
{
zStar = qnorm(1-alpha/2,0,1);
if (abs(zScor) < abs(zStar))
{
print("Se accepta");
ok = TRUE;
}
}
if (ok == FALSE)
{
print("Se respinge");
}
}
testProportion(0.01, 100, 63,0.6, 1)
# V.2
testProportion(0.05, 150, 20, 0.1, 2)
# V.3
testProportion(0.01, 42, 17, 0.25, 2)
# Exercitii propuse
testProportion = function(alpha, n, success, p0, type)
#type = 1 -> asimetric stanga
#type = 2 -> asimetric dreapta
#type = 3 -> ipoteza simetrica
{
pPrim = success / n;
zScor = (pPrim - p0)/(sqrt(p0*(1-p0)/n));
ok = FALSE;
if (type == 1)
{
zStar = qnorm(alpha,0,1);
if (zScor > zStar)
{
print("Se accepta");
ok = TRUE;
}
}
else
if (type == 2)
{
zStar = qnorm(1-alpha,0,1);
print(zScor);
print(zStar);
if (zScor < zStar)
{
print("Se accepta");
ok = TRUE;
}
}
else
{
zStar = qnorm(1-alpha/2,0,1);
if (abs(zScor) < abs(zStar))
{
print("Se accepta");
ok = TRUE;
}
}
if (ok == FALSE)
{
print("Se respinge");
}
}
testProportion(0.01, 42, 17, 0.25, 2)
