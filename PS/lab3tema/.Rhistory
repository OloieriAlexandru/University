ans = pi/(2*sqrt(2));
estimate = vector();
for (i in 1:k)
estimate[i] = computeSecondI(n);
sum = mean(estimate);
cat("Valoarea integralei: ",ans,", rezultatul aproximat: ",sum,"\n");
cat("Eroarea absoluta: ", abs(ans-sum),"\n");
}
integrala2(10000,30);
goodP = function(p)
{
pb = runif(1,0,1);
if (pb <= p)
return (TRUE);
return (FALSE);
}
c5aSimulation = function(p1,p2)
{
days = 1;
pc = vector();
for (i in 1:25)
pc[i] = FALSE;
first = sample(1:25,1);
pc[first] = TRUE;
while (TRUE)
{
cnt = sum(pc);
if (cnt == 0)
break;
days = days + 1;
if (goodP(p1) && cnt < 25) # mai infectez unul in ziua curenta
{
now = sample(1:25,1);
while(pc[now] == TRUE)
now = sample(1:25,1);
pc[now] = TRUE;
}
if (goodP(p2)) # curata calculatoare
{
perm = sample(1:25,25,replace = FALSE);
rem = 2;
rm = 0;
if (sum(pc) == 1) rem = 1;
for (i in 1:25)
{
if (pc[perm[i]] == FALSE) next;
if (rm == rem) break;
rm = rm + 1;
pc[perm[i]] = FALSE;
}
}
}
return (days);
}
c5a = function(n, p1, p2)
{
sum = 0;
for (i in 1:n)
{
sum = sum + c5aSimulation(p1,p2);
}
sum = sum / n;
return (sum);
}
c5a(1000,0.25,0.15)
goodP = function(p)
{
pb = runif(1,0,1);
if (pb <= p)
return (TRUE);
return (FALSE);
}
c5aSimulation = function(p1,p2)
{
days = 1;
pc = vector();
for (i in 1:25)
pc[i] = FALSE;
first = sample(1:25,1);
pc[first] = TRUE;
while (TRUE)
{
cnt = sum(pc);
if (cnt == 0)
break;
days = days + 1;
if (goodP(p1) && cnt < 25) # mai infectez unul in ziua curenta
{
now = sample(1:25,1);
while(pc[now] == TRUE)
now = sample(1:25,1);
pc[now] = TRUE;
}
if (goodP(p2)) # curata calculatoare
{
perm = sample(1:25,25,replace = FALSE);
rem = 2;
rm = 0;
if (sum(pc) == 1) rem = 1;
for (i in 1:25)
{
if (pc[perm[i]] == FALSE) next;
if (rm == rem) break;
rm = rm + 1;
pc[perm[i]] = FALSE;
}
}
}
return (days);
}
c5a = function(n, p1, p2)
{
sum = 0;
for (i in 1:n)
{
sum = sum + c5aSimulation(p1,p2);
}
sum = sum / n;
return (sum);
}
c5a(1000,0.25,0.15)
goodP = function(p)
{
pb = runif(1,0,1);
if (pb <= p)
return (TRUE);
return (FALSE);
}
c5aSimulation = function(p1,p2)
{
days = 1;
pc = vector();
for (i in 1:25)
pc[i] = FALSE;
first = sample(1:25,1);
pc[first] = TRUE;
while (TRUE)
{
cnt = sum(pc);
if (cnt == 0)
break;
days = days + 1;
if (goodP(p1) && cnt < 25) # mai infectez unul in ziua curenta
{
now = sample(1:25,1);
while(pc[now] == TRUE)
now = sample(1:25,1);
pc[now] = TRUE;
}
if (goodP(p2)) # curata calculatoare
{
perm = sample(1:25,25,replace = FALSE);
rem = 2;
rm = 0;
if (sum(pc) == 1) rem = 1;
for (i in 1:25)
{
if (pc[perm[i]] == FALSE) next;
if (rm == rem) break;
rm = rm + 1;
pc[perm[i]] = FALSE;
}
}
}
return (days);
}
c5a = function(n, p1, p2)
{
sum = 0;
for (i in 1:n)
{
sum = sum + c5aSimulation(p1,p2);
}
sum = sum / n;
return (sum);
}
c5a(10000,0.25,0.15)
c5bSimulation = function(p1,p2)
{
pc = vector();
for (i in 1:25)
pc[i] = FALSE;
pc[sample(1:25,1)] = TRUE;
while (TRUE)
{
cnt = sum(pc);
if (cnt == 0)
break;
if (goodP(p1) && cnt < 25) # mai infectez unul in ziua curenta
{
now = sample(1:25,1);
while(pc[now] == TRUE)
now = sample(1:25,1);
pc[now] = TRUE;
}
if (sum(pc)>=5)
return (TRUE);
if (goodP(p2)) # curata calculatoare
{
perm = sample(1:25,25,replace = FALSE);
rem = 2;
rm = 0;
if (sum(pc) == 1) rem = 1;
for (i in 1:25)
{
if (pc[perm[i]] == FALSE) next;
if (rm == rem) break;
rm = rm + 1;
pc[perm[i]] = FALSE;
}
}
}
return (FALSE);
}
c5b = function(n,p1,p2)
{
nr = 0;
for (i in 1:n)
{
if (c5bSimulation(p1,p2))
nr = nr + 1;
}
nr = nr / n;
return(nr);
}
c5b(1000,0.25,0.15);
c5bSimulation = function(p1,p2)
{
pc = vector();
for (i in 1:25)
pc[i] = FALSE;
pc[sample(1:25,1)] = TRUE;
while (TRUE)
{
cnt = sum(pc);
if (cnt == 0)
break;
if (goodP(p1) && cnt < 25) # mai infectez unul in ziua curenta
{
now = sample(1:25,1);
while(pc[now] == TRUE)
now = sample(1:25,1);
pc[now] = TRUE;
}
if (sum(pc)>=5)
return (TRUE);
if (goodP(p2)) # curata calculatoare
{
perm = sample(1:25,25,replace = FALSE);
rem = 2;
rm = 0;
if (sum(pc) == 1) rem = 1;
for (i in 1:25)
{
if (pc[perm[i]] == FALSE) next;
if (rm == rem) break;
rm = rm + 1;
pc[perm[i]] = FALSE;
}
}
}
return (FALSE);
}
c5b = function(n,p1,p2)
{
nr = 0;
for (i in 1:n)
{
if (c5bSimulation(p1,p2))
nr = nr + 1;
}
nr = nr / n;
return(nr);
}
c5b(1000,0.25,0.15);
c5b(5000,0.25,0.15);
c5b(5000,0.25,0.15);
c5b(10000,0.25,0.15);
c7a = function(n)
{
sum = 0;
for (i in 1:n)
{
if (c7aSimulation(0.3))
sum = sum + 1;
}
sum = sum / n;
return (sum);
}
c7a(1000);
goodP = function(p)
{
pb = runif(1,0,1);
if (pb <= p)
return (TRUE);
return (FALSE);
}
c7aSimulation = function(p)
{
pc = vector();
once = vector();
for (i in 1:25)
{
pc[i] = FALSE;
once[i] = FALSE;
}
first = sample(1:25,1);
pc[first] = TRUE;
once[first] = TRUE;
while (TRUE)
{
cnt = sum(pc);
if (cnt == 0)
break;
for (i in 1:25)
{
if (pc[i] == TRUE)
next;
if (goodP(p) == TRUE) # este infectat
{
pc[i] = TRUE;
once[i] = TRUE;
}
}
if (sum(once) == 25)
return (TRUE);
rnd = sample(1:25, size = 25);
nr = 0;
for (i in 1:25)
{
if (pc[rnd[i]] == FALSE)
next;
if (nr == 4)
break;
nr = nr + 1;
pc[rnd[i]] = FALSE;
}
}
return (FALSE);
}
c7a = function(n)
{
sum = 0;
for (i in 1:n)
{
if (c7aSimulation(0.3))
sum = sum + 1;
}
sum = sum / n;
return (sum);
}
c7a(1000);
c7a = function(n)
{
sum = 0;
for (i in 1:n)
{
if (c7aSimulation(0.3))
sum = sum + 1;
}
sum = sum / n;
return (sum);
}
c7a(1000);
goodP = function(p)
{
pb = runif(1,0,1);
if (pb <= p)
return (TRUE);
return (FALSE);
}
c7aSimulation = function(p)
{
pc = vector();
once = vector();
for (i in 1:25)
{
pc[i] = FALSE;
once[i] = FALSE;
}
first = sample(1:25,1);
pc[first] = TRUE;
once[first] = TRUE;
while (TRUE)
{
cnt = sum(pc);
if (cnt == 0)
break;
for (i in 1:25)
{
if (pc[i] == TRUE)
next;
if (goodP(p) == TRUE) # este infectat
{
pc[i] = TRUE;
once[i] = TRUE;
}
}
if (sum(once) == 25)
return (TRUE);
rnd = sample(1:25, size = 25);
nr = 0;
for (i in 1:25)
{
if (pc[rnd[i]] == FALSE)
next;
if (nr == 4)
break;
nr = nr + 1;
pc[rnd[i]] = FALSE;
}
}
return (FALSE);
}
c7a = function(n)
{
sum = 0;
for (i in 1:n)
{
if (c7aSimulation(0.3))
sum = sum + 1;
}
sum = sum / n;
return (sum);
}
c7a(10000);
c7b = function(n, p)
{
sum = 0;
for (i in 1:n)
{
if (c7bSimulation(p) == TRUE)
sum = sum + 1;
}
sum = sum / n;
return (sum);
}
c7b(20,0.3)
c7bSimulation = function(p)
{
pc = vector();
for (i in 1:25)
pc[i] = FALSE;
pc[sample(1:25,1)] = TRUE;
while (TRUE)
{
cnt = sum(pc);
if (cnt == 0)
break;
for (i in 1:25)
{
if (pc[i] == TRUE)
next;
if (goodP(p) == TRUE) # este infectat
{
pc[i] = TRUE;
cnt= cnt + 1;
}
}
if (cnt == 25)
return (TRUE);
rnd = sample(1:25, size = 25);
nr = 0;
for (i in 1:25)
{
if (pc[rnd[i]] == FALSE)
next;
if (nr == 4)
break;
nr = nr + 1;
pc[rnd[i]] = FALSE;
}
}
return (FALSE);
}
c7b = function(n, p)
{
sum = 0;
for (i in 1:n)
{
if (c7bSimulation(p) == TRUE)
sum = sum + 1;
}
sum = sum / n;
return (sum);
}
c7b(20,0.3)
c7c = function(epsilon, p, p_stelat)
{
alfa = 1 - p;
z = qnorm(alfa/2);
nMin = p_stelat * (1 - p_stelat) * ((z/epsilon)^2);
return (nMin);
}
c7c(0.01,0.99,0.95);
c7c = function(epsilon, p, p_stelat)
{
alfa = 1 - p;
z = qnorm(alfa/2);
nMin = p_stelat * (1 - p_stelat) * ((z/epsilon)^2);
return (nMin);
}
c7c(0.01,0.99,0.95);
c7c = function(epsilon, p, p_stelat)
{
alfa = 1 - p;
z = qnorm(alfa/2);
nMin = p_stelat * (1 - p_stelat) * ((z/epsilon)^2);
return (nMin);
}
c7c(0.01,0.99,0.95);
c7a(3152);
